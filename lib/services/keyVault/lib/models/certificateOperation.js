/*
 * Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

/**
 * @class
 * Initializes a new instance of the CertificateOperation class.
 * @constructor
 * @member {string} [id] The certificate id
 * 
 * @member {object} [issuerReference] Reference to the issuer of the X509
 * component of a certificate.
 * 
 * @member {string} [issuerReference.name] Name of the referenced issuer
 * object.
 * 
 * @member {buffer} [csr] The Certificate Signing Request (CSR) that is being
 * used in the certificate operation.
 * 
 * @member {boolean} [cancellationRequested] Indicates if cancellation was
 * requested on the certificate operation.
 * 
 * @member {string} [status] Status of the certificate operation.
 * 
 * @member {string} [statusDetails] The status details of the certificate
 * operation.
 * 
 * @member {object} [error] Error encountered, if any, during the certificate
 * operation.
 * 
 * @member {string} [error.code]
 * 
 * @member {string} [error.message]
 * 
 * @member {object} [error.additionalInfo]
 * 
 * @member {string} [target] Location which contains the result of the
 * certificate operation.
 * 
 * @member {string} [requestId] Identifier for the certificate operation.
 * 
 */
function CertificateOperation() {
}

/**
 * Defines the metadata of CertificateOperation
 *
 * @returns {object} metadata of CertificateOperation
 *
 */
CertificateOperation.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'CertificateOperation',
    type: {
      name: 'Composite',
      className: 'CertificateOperation',
      modelProperties: {
        id: {
          required: false,
          readOnly: true,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        issuerReference: {
          required: false,
          serializedName: 'issuer',
          type: {
            name: 'Composite',
            className: 'IssuerReference'
          }
        },
        csr: {
          required: false,
          serializedName: 'csr',
          type: {
            name: 'Base64Url'
          }
        },
        cancellationRequested: {
          required: false,
          serializedName: 'cancellation_requested',
          type: {
            name: 'Boolean'
          }
        },
        status: {
          required: false,
          serializedName: 'status',
          type: {
            name: 'String'
          }
        },
        statusDetails: {
          required: false,
          serializedName: 'status_details',
          type: {
            name: 'String'
          }
        },
        error: {
          required: false,
          serializedName: 'error',
          type: {
            name: 'Composite',
            className: 'KeyVaultError'
          }
        },
        target: {
          required: false,
          serializedName: 'target',
          type: {
            name: 'String'
          }
        },
        requestId: {
          required: false,
          serializedName: 'request_id',
          type: {
            name: 'String'
          }
        }
      }
    }
  };
};

module.exports = CertificateOperation;
